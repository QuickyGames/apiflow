version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-apiflow}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      SERVICE_TYPE: api
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/apiflow}
      ADMIN_LOGIN: ${ADMIN_LOGIN:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SERVICE_TYPE: worker
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/apiflow}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app/backend
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    restart: unless-stopped

